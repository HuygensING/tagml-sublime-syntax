%YAML 1.2
---
name: TAGML
# See http://www.sublimetext.com/docs/3/syntax.html
file_extensions:
  - tagml
scope: text.tagml

contexts:
  main:
    - include: escaped

    - match: "\\[!ns [^]]+]"
      scope: comment.namespace.tagml

    # multi line comments
    - match: "\\[!" 
      scope: punctuation.definition.comment.tagml
      push: 
        - meta_scope: comment.block.tagml
        - match: "!]"
          scope: punctuation.definition.comment.tagml
          pop: true

    - match: "<\\|"
      scope: punctuation.definition.set.begin.tagml
      push: set.ctx

    - match: "\\["
      scope: punctuation.definition.tag.begin.tagml
      push: markup.open

    - match: "<"
      scope: punctuation.definition.tag.begin.tagml
      push: markup.close


  markup.open:
    - match: "[a-zA-Z0-9_]+"
      scope: entity.name.tag.tagml

    - match: "\\|"
      scope: punctuation.separator.tagml
      push: layer.ctx

    - match: "[\\+\\-,\\?:\"']+"
      scope: keyword.operator.tagml

    - match: " "
      push: annotation.tagml

    - match: ">"
      scope: punctuation.definition.tag.end.tagml
      pop: true

    - match: "]"
      scope: punctuation.definition.tag.end.tagml
      pop: true

  markup.close:
    - match: "[a-zA-Z0-9_]+"
      scope: entity.name.tag.tagml

    - match: "\\|"
      scope: punctuation.separator.tagml
      push: layer.ctx

    - match: "[\\+\\-,\\?:\"']+"
      scope: keyword.operator.tagml

    - match: "]"
      scope: punctuation.definition.tag.end.tagml
      pop: true


  set.ctx:
    - match: "\\["
      scope: punctuation.definition.tag.begin.tagml
      push: markup.open

    - match: "\\|>"
      scope: punctuation.definition.set.end.tagml
      pop: true

    - match: "\\|"
      scope: punctuation.definition.set.separator.tagml

    - match: "<"
      scope: punctuation.definition.tag.begin.tagml
      push: markup.close


  layer.ctx:
    - match: "[\\+,a-zA-Z0-9]+"
      scope: entity.name.section.tagml
      pop: true


  annotation.tagml:
    - match: "([a-zA-Z0-9_]+)(=)([0-9]+\\.?[0-9]*)"
      captures:
        1: entity.other.attribute-name.localname.tagml
        2: keyword.operator.tagml
        3: constant.numeric.tagml
      pop: true

    - match: "([a-zA-Z0-9_]+)(=)(\"[^\"]*\")"
      captures:
        1: entity.other.attribute-name.localname.tagml
        2: keyword.operator.tagml
        3: string.quoted.double.tagml
      pop: true

    - match: "([a-zA-Z0-9_]+)(=)('[^']*')"
      captures:
        1: entity.other.attribute-name.localname.tagml
        2: keyword.operator.tagml
        3: string.quoted.single.tagml
      pop: true

    - match: "([a-zA-Z0-9_]+)(=)([Tt][Rr][Uu][Ee])"
      captures:
        1: entity.other.attribute-name.localname.tagml
        2: keyword.operator.tagml
        3: constant.language.boolean.tagml
      pop: true

    - match: "([a-zA-Z0-9_]+)(=)([Ff][Aa][Ll][Ss][Ee])"
      captures:
        1: entity.other.attribute-name.localname.tagml
        2: keyword.operator.tagml
        3: constant.language.boolean.tagml
      pop: true

    - match: "([a-zA-Z0-9_]+)(=)({)(.*)(})"
      captures:
        1: entity.other.attribute-name.localname.tagml
        2: keyword.operator.tagml
        3: annotation.brackets.tagml
        4: constant.object.tagml
        5: annotation.brackets.tagml
      pop: true

    - match: "([a-zA-Z0-9_]+)(=)(\\[>)(.*)(<\\])"
      captures:
        1: entity.other.attribute-name.localname.tagml
        2: keyword.operator.tagml
        3: annotation.brackets.tagml
        4: constant.richtext.tagml
        5: annotation.brackets.tagml
      pop: true

    - match: "([a-zA-Z0-9_]+)(=)(\\[)([^\\]]*)(\\])"
      captures:
        1: entity.other.attribute-name.localname.tagml
        2: keyword.operator.tagml
        3: annotation.brackets.tagml
        4: constant.list.tagml
        5: annotation.brackets.tagml
      pop: true

  escaped:
    - match: \\.
      scope: constant.character.escape.tagml
